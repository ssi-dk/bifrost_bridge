# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/99_bifrost.ipynb.

# %% auto 0
__all__ = ['process_qc_data']

# %% ../nbs/99_bifrost.ipynb 2
# That export there, it makes sure this code goes into the module.

# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml
from fastcore import test

#!export
from . import core

# %% ../nbs/99_bifrost.ipynb 5
from .mlst import process_mlst_data
from .fastp import process_fastp_data
from .quast import process_quast_data


@call_parse
def process_qc_data(
    mlst_path: str = None,
    fastp_path: str = None,
    quast_path: str = None,
    output_path: str = "./output.tsv",
):
    """
    Command-line interface for processing QC data.

    This function processes MLST and FASTP data files based on the provided command-line arguments.
    It supports specifying input file paths for MLST and FASTP data, and outputs the processed data to specified paths.

    Arguments:
        mlst (str): Path to the MLST input file.
        fastp (str): Path to the FASTP input file.
        output (str): Path to the output file (default: './output.tsv').
    """
    if mlst_path is not None:
        if not os.path.exists(mlst_path):
            raise FileNotFoundError(f"File not found: {mlst_path}")
        process_mlst_data(
            input_path=str(mlst_path),
            output_path="./parsed_mlst.tsv",
            replace_header=None,
            filter_columns="SampleID, Species, ST",
            header_exists=0,
            add_header="SampleID, Species, ST, 1, 2, 3, 4, 5, 6, 7",
        )

    if fastp_path is not None:
        if not os.path.exists(fastp_path):
            raise FileNotFoundError(f"File not found: {fastp_path}")
        process_fastp_data(
            input_path=fastp_path,
            output_path="./parsed_fastp.tsv",
            filter_columns="summary£fastp_version, summary£sequencing, summary£before_filtering£total_reads",
            replace_header="fastp_version, sequencing, total_reads",
        )

    if quast_path is not None:
        if not os.path.exists(quast_path):
            raise FileNotFoundError(f"File not found: {quast_path}")
        process_quast_data(
            input_path=quast_path,
            output_path="./parsed_quast.tsv",
            filter_columns="Assembly,# contigs (>= 0 bp), N50",
            transpose=True,
        )
